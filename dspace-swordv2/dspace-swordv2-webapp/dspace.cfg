#---------------------------------------------------------------#
#--------------SWORD 2.0 SPECIFIC CONFIGURATIONS----------------#
#---------------------------------------------------------------#
# These configs are only used by the SWORD 2.0 interface        #
#---------------------------------------------------------------#

# the base url of the sword 2.0  system
#
# the default if {dspace.url}/sword2
#
#sword2.url = http://www.myu.ac.uk/sword2

# The base URL of the SWORD collection.  This is the URL from
# which DSpace will construct the deposit location urls for
# collections.
#
# The default is {dspace.url}/sword2/collection
#
# In the event that you are not deploying DSpace as the ROOT
# application in the servlet container, this will generate
# incorrect URLs, and you should override the functionality
# by specifying in full as below:
#
# sword2.collection.url = http://www.myu.ac.uk/sword2/collection

# The base URL of the SWORD service document.  This is the
# URL from which DSpace will construct the service document
# location urls for the site, and for individual collections
#
# The default is {dspace.url}/sword2/servicedocument
#
# In the event that you are not deploying DSpace as the ROOT
# application in the servlet container, this will generate
# incorrect URLs, and you should override the functionality
# by specifying in full as below:
#
# sword2.servicedocument.url = http://www.myu.ac.uk/sword2/servicedocument

# The accept packaging properties, along with their associated
# quality values where appropriate.
#
# Global settings; these will be used on all DSpace collections
#
sword2.accept-packaging.collection.METSDSpaceSIP = http://purl.org/net/sword/package/METSDSpaceSIP
sword2.accept-packaging.collection.SimpleZip = http://purl.org/net/sword/package/SimpleZip
sword2.accept-packaging.collection.Binary = http://purl.org/net/sword/package/Binary

# The accept packaging properties for items.  This is used to determine
# which package types are acceptable to deposit into an existing item,
# either adding to or replacing the media resource
#
sword2.accept-packaging.item.METSDSpaceSIP = http://purl.org/net/sword/package/METSDSpaceSIP
sword2.accept-packaging.item.SimpleZip = http://purl.org/net/sword/package/SimpleZip
sword2.accept-packaging.item.Binary = http://purl.org/net/sword/package/Binary

# A comma separated list of MIME types that SWORD will accept
sword2.accepts = application/zip, image/jpeg

# Collection Specific settings: these will be used on the collections
# with the given handles
#
#sword2.accept-packaging.collection.[handle].METSDSpaceSIP = http://purl.org/net/sword-types/METSDSpaceSIP

# Should the server offer as the default the list of all Communities
# to a Service Document request.  If false, the server will offer
# the list of all collections, which is the default and recommended
# behaviour at this stage.
#
# NOTE: a service document for Communities will not offer any viable
# deposit targets, and the client will need to request the list of
# Collections in the target before deposit can continue
#
sword2.expose-communities = false

# The maximum upload size of a package through the sword interface,
# in bytes
#
# This will be the combined size of all the files, the metadata and
# any manifest data.  It is NOT the same as the maximum size set
# for an individual file upload through the user interface.  If not
# set, or set to 0, the sword service will default to no limit.
#
sword2.max-upload-size = 0

# Should DSpace store a copy of the original sword deposit package?
#
# NOTE: this will cause the deposit process to run slightly slower,
# and will accelerate the rate at which the repository consumes disk
# space.  BUT, it will also mean that the deposited packages are
# recoverable in their original form.  It is strongly recommended,
# therefore, to leave this option turned on
#
sword2.keep-original-package = true

# The bundle name that SWORD should store incoming packages under if
# sword.keep-original-package is set to true.  The default is "SWORD"
# if not value is set
#
# sword2.bundle.name = SWORD

# In the event of package ingest failure, provide an option to store
# the package on the file system. The default is false.
#sword2.keep-package-on-fail=false
#sword2.failed-package.dir=${dspace.baseUrl}/upload

# Should we support mediated deposit via sword?  Enabled, this will
# allow users to deposit content packages on behalf of other users.
#
# See the SWORD specification for a detailed explanation of deposit
# On-Behalf-Of another user
#
sword2.on-behalf-of.enable = true

# The URL which identifies the sword software which provides
# the sword interface.  This is the URL which DSpace will use
# to fill out the atom:generator element of its atom documents.
#
# The default is:
#
# http://www.dspace.org/ns/sword/1.3.1
#
# If you have modified your sword software, you should change
# this URI to identify your own version.  If you are using the
# standard dspace-sword module you will not, in general, need
# to change this setting
#
# sword2.generator.url = http://www.dspace.org/ns/sword/2.0/

sword2.auth-type = Basic

sword2.generator.version = 2.0

sword2.allow-community-deposit = false

sword2.upload.tempdir = ${dspace.dir}/upload

# The metadata field in which to store the updated date for
# items deposited via SWORD.
#
sword2.updated.field = dc.date.updated

# The metadata field in which to store the value of the slug
# header if it is supplied
#
sword2.slug.field = dc.identifier.slug

sword2.author.field = dc.contributor.author
sword2.title.field = dc.title

sword2.disseminate-packaging.METSDSpaceSIP = http://purl.org/net/sword/package/METSDSpaceSIP
sword2.disseminate-packaging.SimpleZip = http://purl.org/net/sword/package/SimpleZip

# Configure the plugins to process incoming packages.  The form of this
# configuration is as per the Plugin Manager's Named Plugin documentation:
#
# plugin.named.[interface] = [implementation] = [package format identifier] \
#
# Package ingesters should implement the SWORDIngester interface, and
# will be loaded when a package of the format specified above in:
#
# sword.accept-packaging.[package format].identifier = [package format identifier]
#
# is received.
#
# In the event that this is a simple file deposit, with no package
# format, then the class named by "SimpleFileIngester" will be loaded
# and executed where appropriate.  This case will only occur when a single
# file is being deposited into an existing DSpace Item
#
plugin.named.org.dspace.sword2.SwordContentIngester = \
  org.dspace.sword2.SimpleZipContentIngester = http://purl.org/net/sword/package/SimpleZip, \
  org.dspace.sword2.SwordMETSIngester = http://purl.org/net/sword/package/METSDSpaceSIP, \
  org.dspace.sword2.BinaryContentIngester = http://purl.org/net/sword/package/Binary, \
  org.dspace.swordpackagers.SwordDocXIngester = application/vnd.openxmlformats-officedocument.wordprocessingml.document, \
  org.dspace.swordpackagers.SwordXifIngester = image/jpeg

plugin.single.org.dspace.sword2.SwordEntryIngester = \
  org.dspace.sword2.SimpleDCEntryIngester

plugin.single.org.dspace.sword2.SwordEntryDisseminator = \
  org.dspace.sword2.SimpleDCEntryDisseminator

# note that we replace ";" with "_" as ";" is not permitted in the PluginManager names
plugin.named.org.dspace.sword2.SwordContentDisseminator = \
  org.dspace.sword2.SimpleZipContentDisseminator = http://purl.org/net/sword/package/SimpleZip, \
  org.dspace.sword2.FeedContentDisseminator = application/atom+xml, \
  org.dspace.sword2.FeedContentDisseminator = application/atom+xml_type_feed

# note that we replace ";" with "_" as ";" is not permitted in the PluginManager names
plugin.named.org.dspace.sword2.SwordStatementDisseminator = \
  org.dspace.sword2.AtomStatementDisseminator = atom, \
  org.dspace.sword2.OreStatementDisseminator = rdf, \
  org.dspace.sword2.AtomStatementDisseminator = application/atom+xml_type_feed, \
  org.dspace.sword2.OreStatementDisseminator = application/rdf+xml

plugin.single.org.dspace.sword2.WorkflowManager = \
  org.dspace.sword2.WorkflowManagerDefault

# tell the SWORD METS implementation which package ingester to use
# to install deposited content.  This should refer to one of the
# classes configured for:
#
# plugin.named.org.dspace.content.packager.PackageIngester
#
# The value of sword.mets-ingester.package-ingester tells the
# system which named plugin for this interface should be used
# to ingest SWORD METS packages
#
# The default is METS
#
# sword2.mets-ingester.package-ingester = METS

# Should the sword server enable restore-mode when ingesting new
# packages. If this is enabled the item will be treated as a
# previously deleted item from the repository. If the item had
# previously been assigned a handle then that same handle will be
# restored to activity.
sword2.restore-mode.enable = false

# metadata field mapping for SimpleDCEntryIngester
#
sword2.simpledc.abstract = dc.description.abstract
sword2.simpledc.accessRights = dc.rights
#sword2.simpledc.accrualMethod = dc.????
#sword2.simpledc.accrualPeriodicity = dc.????
#sword2.simpledc.accrualPolicy = dc.????
sword2.simpledc.alternative = dc.title.alternative
#sword2.simpledc.audience = dc.???
sword2.simpledc.available = dc.date.available
sword2.simpledc.bibliographicCitation = dc.identifier.citation
#sword2.simpledc.conformsTo = dc.????
sword2.simpledc.contributor = dc.contributor
sword2.simpledc.coverage = dc.coverage
sword2.simpledc.created = dc.date.created
sword2.simpledc.creator = dc.contributor.author
sword2.simpledc.date = dc.date
sword2.simpledc.dateAccepted = dc.date.accepted
sword2.simpledc.dateCopyrighted = dc.date.???
sword2.simpledc.dateSubmitted = dc.date.submitted
sword2.simpledc.description = dc.description
#sword2.simpledc.educationLevel = dc.???
sword2.simpledc.extent = dc.format.extent
sword2.simpledc.format = dc.format
#sword2.simpledc.hasFormat = dc.????
#sword2.simpledc.hasPart = dc.???
#sword2.simpledc.hasVersion = dc.???
sword2.simpledc.identifier = dc.identifier
#sword2.simpledc.instructionalMethod = dc.???
#sword2.simpledc.isFormatOf = dc.???
sword2.simpledc.isPartOf = dc.relation.ispartof
sword2.simpledc.isReferencedBy = dc.relation.isreferencedby
sword2.simpledc.isReplacedBy = dc.relation.isreplacedby
sword2.simpledc.isRequiredBy = dc.relation.isrequiredby
sword2.simpledc.issued = dc.date.issued
#sword2.simpledc.isVersionOf = dc.????
sword2.simpledc.language = dc.language
#sword2.simpledc.license = dc.????
#sword2.simpledc.mediator = dc.????
sword2.simpledc.medium = dc.format.medium
sword2.simpledc.modified = dc.date.modified
sword2.simpledc.provenance = dc.description.provenance
sword2.simpledc.publisher = dc.publisher
sword2.simpledc.references = dc.relation.references
sword2.simpledc.relation = dc.relation
sword2.simpledc.replaces = dc.relation.replaces
sword2.simpledc.requires = dc.relation.requires
sword2.simpledc.rights = dc.rights
sword2.simpledc.rightsHolder = dc.rights
sword2.simpledc.source = dc.source
sword2.simpledc.spatial = dc.coverage.spatial
sword2.simpledc.subject = dc.subject
#sword2.simpledc.tableOfContents = dc.????
sword2.simpledc.temporal = dc.coverage.temporal
sword2.simpledc.title = dc.title
sword2.simpledc.type = dc.type
#sword2.simpledc.valid = dc.????


# order of precedence for importing multipart content.  if entry-first then
# metadata in the package will override metadata in the entry, otherwise
# the entry metadata will be applied before the package metadata, so the
# package may override the metadata supplied in the entry - it depends on
# the specific behaviour of the package ingester selected
#
# Defaults to false
sword2.multipart.entry-first = false

# if the workflow gets started, should there be a notification
# email sent
#
sword2.workflow.notify = true

# when content is replaced, should the old version of the content be kept?  This
# creates a copy of the ORIGINAL bundle with the name V_YYYY-MM-DD.X where YYYY-MM-DD
# is the date the copy was created, and X is an integer from 0 upwards.
#
sword2.versions.keep = true

sword2.state.workspace.uri = ${dspace.url}/state/inprogress
sword2.state.workspace.description = The item is in the user workspace
sword2.state.workflow.uri = ${dspace.url}/state/inreview
sword2.state.workflow.description = The item is undergoing review prior to acceptance to the archive
sword2.state.archive.uri = ${dspace.url}/state/archived
sword2.state.archive.description = The item has been archived
sword2.state.withdrawn.uri = ${dspace.url}/state/withdrawn
sword2.state.withdrawn.description = The item has been withdrawn from the item and is no longer available

########################################################################################################################


# tell the SWORD METS implementation which package ingester to use
# to install deposited content.  This should refer to one of the
# classes configured for:
#
# plugin.named.org.dspace.content.packager.PackageIngester
#
# The value of sword.mets-ingester.package-ingester tells the
# system which named plugin for this interface should be used
# to ingest SWORD METS packages
#
# The default is METS
#
# sword.mets-ingester.package-ingester = METS

# Define the metadata type EPDCX (EPrints DC XML)
# to be handled by the SWORD crosswalk configuration
#
mets.default.ingest.crosswalk.EPDCX = SWORD

# define the stylesheet which will be used by the self-named
# XSLTIngestionCrosswalk class when asked to load the SWORD
# configuration (as specified above).  This will use the
# specified stylesheet to crosswalk the incoming SWAP metadata
# to the DIM format for ingestion
#
crosswalk.submission.SWORD.stylesheet = crosswalks/sword-swap-ingest.xsl

# The base URL of the SWORD media links.  This is the URL
# which DSpace will use to construct the media link urls
# for items which are deposited via sword
#
# The default is {dspace.url}/sword/media-link
#
# In the event that you are not deploying DSpace as the ROOT
# application in the servlet container, this will generate
# incorrect URLs, and you should override the functionality
# by specifying in full as below:
#
# sword.media-link.url = http://www.myu.ac.uk/sword/media-link


# Should the sword server enable restore-mode when ingesting new
# packages. If this is enabled the item will be treated as a
# previously deleted item from the repository. If the item had
# previously been assigned a handle then that same handle will be
# restored to activity.
sword.restore-mode.enable = false




